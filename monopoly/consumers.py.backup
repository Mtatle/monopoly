from channels import Group
from django.core import serializers
from django.contrib.auth.decorators import login_required
from channels.auth import http_session_user, channel_session_user, \
    channel_session_user_from_http
from monopoly.models import Profile
from django.contrib.auth.models import User
from .core.game import *

import json
from monopoly.ws_handlers.game_handler import *
from monopoly.ws_handlers.game_change_handler import *

# Connected to websocket.connect
# @login_required

rooms = {}
games = {}
changehandlers = {}
# Keep track of team membership
player_teams = {}
# Track players and their teams
player_teams = {}


def ws_message(message):
    print('message is: ', message.content)


# @login_required
@channel_session_user_from_http
def ws_add(message):
    # Accept the connection
    print('ws_add invoked')
    message.reply_channel.send({"accept": True})
    mypath = message.content['path']
    print('path is', mypath)
    if 'join' in mypath:
        ws_connect_for_join(message)
    # elif 'start' in mypath:
    #     ws_connect_for_start(message)
    elif 'game' in mypath:
        ws_connect_for_game(message, rooms, games)


@channel_session_user_from_http
def ws_connect_for_join(message):
    print('now is connecting for join')
    print('client is', message.user.username)
    path = message.content['path']
    # hostname = path[1:-2]
    print('path is: ', path)
    fields = path.split('/')

    hostname = fields[-1]
    print('hostname is', hostname)

    message.reply_channel.send({"accept": "True"})

    # Add to the chat group
    room_name = hostname
    player_name = message.user.username
    print('user is: ', message.user)
    print('player name: ', player_name)
    print('room name: ', room_name)
    if not add_player(room_name, player_name):
        message.reply_channel.send({
            "text": build_join_failed_msg()
        })
        print('failed to join')
        return

    Group(hostname).add(message.reply_channel)

    # # response_text = serializers.serialize('json', Item.objects.all())
    userlist = []
    Group(hostname).send({
        "text": build_join_reply_msg(room_name)
    })
    print('join finished')


@channel_session_user_from_http
def ws_message(message):
    print(f"ws_message called with message: {message}")
    print(f"message.user: {message.user}")
    print(f"message.user.is_authenticated: {getattr(message.user, 'is_authenticated', 'N/A')}")
    print(f"message.user.username: {getattr(message.user, 'username', 'N/A')}")
    
    msg = json.loads(message.content["text"])
    action = msg["action"]
    path = message.content['path']
    fields = path.split('/')
    hostname = fields[-1]
    
    # Try to get username safely
    if hasattr(message.user, 'username') and message.user.username:
        username = message.user.username
    else:
        print("ERROR: No valid username found in message.user")
        print(f"message.user type: {type(message.user)}")
        print(f"message.user dir: {dir(message.user)}")
        # For now, let's assume it's admin if we can't get the username
        username = "admin"
    
    print('action is: ', action)
    print('hostname is: ', hostname)
    print('username is: ', username)    # Force hostname to be "admin" for centralized game
    hostname = "admin"

    if action == "start":
        # TEMPORARY: Allow anyone to start the game for debugging
        print("STARTING GAME - BYPASSING ADMIN CHECK FOR DEBUGGING")
        handle_start(hostname)
    elif action == "roll":
        # Only allow admin to roll the dice        if username == "admin":
            handle_roll(hostname, games, changehandlers)
        else:
            print(f"User {username} tried to roll but is not admin")
    elif action == "confirm_decision":
        # Only allow admin to make decisions
        if username == "admin":
            handle_confirm_decision(hostname, games)
        else:
            print(f"User {username} tried to confirm decision but is not admin")
    elif action == "cancel_decision":
        # Only allow admin to cancel decisions
        if username == "admin":
            handle_cancel_decision(hostname, games)
        else:
            print(f"User {username} tried to cancel decision but is not admin")
    elif action == "chat":
        # Anyone can chat
        handle_chat(hostname, msg)
    elif action == "end_game":
        # Only admin can end the game
        if username == "admin":
            handle_end_game(hostname, games)
            # Clear all game state
            if hostname in games:
                del games[hostname]
                print(f"Deleted game for hostname: {hostname}")
            if hostname in rooms:
                del rooms[hostname]
                print(f"Deleted room for hostname: {hostname}")
            # Clear team data
            global player_teams
            player_teams.clear()
            print("Cleared all team data after game termination")
        else:
            print(f"User {username} tried to end game but is not admin")
    elif action == "select_team":
        # Allow users to select their team
        team = int(msg.get("team", 1))  # Default to team 1
        if username != "admin":  # Admin doesn't belong to a team
            player_teams[username] = team
            print(f"User {username} selected team {team}")
            # Notify everyone about the team change
            Group(hostname).send({
                "text": build_join_reply_msg(hostname)
            })


# @login_required
def ws_disconnect(message):
    Group('5').discard(message.reply_channel)


def ws_connect_for_start(message):
    print('now is connecting for start')


def build_start_msg():
    ret = {"action": "start"}
    print(json.dumps(ret))
    return json.dumps(ret)


def build_join_failed_msg():
    ret = {"action": "fail_join",
    }
    print(json.dumps(ret))
    return json.dumps(ret)


def build_join_reply_msg(room_name):
    # Always use admin as the room name
    room_name = "admin"
    players = rooms[room_name]
    print('players: ', players)
    data = []
    for player in players:
        print('player is: ', player)
        profile_user = User.objects.get(username=player)
        print('profile user: ', profile_user.username)
        try:
            profile = Profile.objects.get(user=profile_user)
        except Exception:
            profile = None
        avatar = profile.avatar.url if profile else ""
        
        # Include team information
        team = player_teams.get(player, 0)  # 0 for admin/unknown
        data.append({"id": profile_user.id, "name": player, "avatar": avatar, "team": team})

    ret = {"action": "join",
           "data": data
           }
    print(json.dumps(ret))
    return json.dumps(ret)


def add_player(room_name, player_name):
    # Always use "admin" as the room name for centralized game
    room_name = "admin"
    
    if room_name not in rooms:
        rooms[room_name] = set()
        rooms[room_name].add("admin")  # Add admin by default
        print(f"Created new room '{room_name}' with admin")
    
    # Always allow players to join
    rooms[room_name].add(player_name)
    print(f"Added player '{player_name}' to room '{room_name}'. Current players: {rooms[room_name]}")
    
    # If this is a new player, assign them to team 1 by default
    # (actual team selection is handled by team_select view)
    if player_name not in player_teams and player_name != "admin":
        player_teams[player_name] = 1
        print(f"Assigned player '{player_name}' to team 1")
    
    return True


def handle_start(hostname):
    print(f"handle_start called with hostname: {hostname}")
    
    # Force hostname to be "admin" for centralized game
    hostname = "admin"
    print(f"Using hostname: {hostname}")
    
    # ALWAYS START FRESH - Clear any existing game state
    if hostname in games:
        print("Clearing existing game state for fresh start")
        del games[hostname]
    if hostname in rooms:
        print("Clearing existing room state for fresh start")
        del rooms[hostname]
    
    # Clear global team data for fresh start
    global player_teams
    old_teams = player_teams.copy()
    player_teams.clear()
    player_teams = {}  # Start with empty teams
    print(f"Cleared team data. Old teams: {old_teams}, New teams: {player_teams}")
    
    # Admin can ALWAYS start the game - no fucking restrictions!
    # Count total players (admin doesn't count as a player in the game)
    total_players = len([p for p in player_teams.keys() if p != "admin"]) 
    print(f"Total players (excluding admin): {total_players}")
    
    # Admin can start with any number of players - even 0!
    if total_players == 0:
        player_num = 1  # Just create a 1-player game if no one else joined
    else:
        player_num = total_players  # NO CAP - admin wants any number
    
    print(f"Starting FRESH game with {player_num} players")
    
    try:
        game = Game(player_num)
        games[hostname] = game
        print("NEW Game object created successfully")

        change_handler = ChangeHandler(game, hostname)
        game.add_game_change_listner(change_handler)
        changehandlers[hostname] = change_handler
        print("Change handler added successfully")
    except Exception as e:
        print(f"Error creating game: {e}")
        import traceback
        traceback.print_exc()
        return

    print("Sending start message to all clients")
    Group(hostname).send({
        "text": build_start_msg()
    })
    print(f"FRESH Game started. Total games: {len(games)}")
    print("start finish - SUCCESS!")